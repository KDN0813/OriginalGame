#pragma once
#include "Component.h"

class EnemyComponent;
class PlayerComponent;
class Transform3DComponent;

// 最後に更新する、エネミー用のコンポーネント
class FinalUpdateEnemyComponent : public Component
{
public:
    FinalUpdateEnemyComponent() {};
    ~FinalUpdateEnemyComponent() {};

    // 開始関数
    void Start()  override;
    // 終了関数
    void End()  override {};
    // リスタート処理
    void ReStart() override {};      // パラメータの初期化
    // 更新関数
    void Update(float elapsed_time) override;

    // 名前取得
    const char* GetName()const  override { return "FinalUpdateEnemyComponent"; };

    // 優先度
    const PRIORITY GetPriority()const noexcept  override { return PRIORITY::LOWEST; };

private:
    std::weak_ptr<EnemyComponent> enemy;
    std::weak_ptr<Transform3DComponent> transform_Wptr;

    std::weak_ptr<Transform3DComponent> player_transform_Wptr;
    std::weak_ptr<PlayerComponent> player_Wptr;
    int collision_range = 1;    // プレイヤーとの当たり判定を行う範囲
#ifdef _DEBUG
public:
    /**
     * デバックの情報を2D画面に出力する関数
     */
    void DrawDebugGUI()  override {};
    /**
     * デバックの情報を3D画面上に出力する関数
     */
    void DrawDebugPrimitive()  override {};
    /**
     * デバッグプリミティブ表示用ImGui
     */
    void DrawDebugPrimitiveGUI()  override {};
    bool IsDebugPrimitive() override { return false; }   // DebugPrimitiveが存在するか
#endif // DEBUG
};

