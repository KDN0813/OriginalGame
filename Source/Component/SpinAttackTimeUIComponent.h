#pragma once
#include "Component.h"

class SpriteComponent;
class PlayerComponent;

// 回転攻撃の残り時間UIの更新を行う
class SpinAttackTimeUIComponent : public Component
{
public:
    SpinAttackTimeUIComponent() {};
    ~SpinAttackTimeUIComponent() {};

    // 開始関数
    void Start()  override {};
    // 終了関数
    void End()  override {};
    // リスタート処理
    void ReStart() override {};      // パラメータの初期化
    // 更新関数
    void Update(float elapsed_time) override;

    // 名前取得
    const char* GetName()const  override { return "SpinAttackTimeUIComponent"; };

    // 優先度
    const PRIORITY GetPriority()const noexcept  override { return PRIORITY::DEFAULT; };
   
private:
    std::weak_ptr<SpriteComponent> sprite_Wptr;
    std::weak_ptr<PlayerComponent> player_Wptr;
#ifdef _DEBUG
public:
    /**
     * デバックの情報を2D画面に出力する関数
     */
    void DrawDebugGUI()  override {};
    /**
     * デバックの情報を3D画面上に出力する関数
     */
    void DrawDebugPrimitive()  override {};
    /**
     * デバッグプリミティブ表示用ImGui
     */
    void DrawDebugPrimitiveGUI()  override {};
    bool IsDebugPrimitive() override { return false; }   // DebugPrimitiveが存在するか
#endif // DEBUG
};

